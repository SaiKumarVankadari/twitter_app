// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id       Int       @id @default(autoincrement())
  username String    @unique
  email    String    @unique
  password String?
  createdAt DateTime    @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  tweets    Tweet[]
  comments Comment[]
  reactions Reaction[]
  replies  Reply[] 
  uploadedFiles UploadedFile[]
  notifications Notification[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Define a reference to the User who owns the notification
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}
model UploadedFile {
  id              Int       @id @default(autoincrement())
  filename        String
  filesize        Int
  filetype        String
  filepath        String
  uploadedByUserId Int       // Reference to the user who uploaded the file
  createdAt       DateTime  @default(now())
  uploadedByUser  User      @relation(fields: [uploadedByUserId], references: [id])
}

model Tweet {
  id          Int         @id @default(autoincrement())
  content     String
  createdAt   DateTime    @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  authorId    Int
  author      User        @relation(fields: [authorId], references: [id])
  comments    Comment[]
  reactions   Reaction[]
  categories  Category[]

  @@index([authorId], name: "authorId")
}

model Comment {
  id        Int         @id @default(autoincrement())
  content   String
  updatedContent String?
  createdAt DateTime    @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  authorId  Int
  author    User        @relation(fields: [authorId], references: [id])
  tweetId    Int
  tweet      Tweet        @relation(fields: [tweetId], references: [id])
  reactions Reaction[]
  replies   Reply[]   @relation("CommentToReply")
}

// schema.prisma

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  commentId Int
  userId    Int
  comment   Comment  @relation("CommentToReply", fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}


model Reaction {
  id        Int      @id @default(autoincrement())
  type      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  tweetId    Int
  post      Tweet     @relation(fields: [tweetId], references: [id])
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String
  tweets Tweet[]  
}
